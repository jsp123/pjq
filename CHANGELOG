# Changelog

All notable changes to pjq will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [1.0.0] - 2025-05-27

### Added
- **Core parallel processing engine** - Automatic 6x speedup on large JSON files
- **Smart query detection** - Automatically chooses parallel vs sequential based on query complexity
- **Drop-in jq compatibility** - Identical results to regular jq with `--keep-order` by default
- **Parallel aggregations** - Count, sum, and average operations with distributed processing
- **Force modes** - `--parallel` and `--sequential` flags for manual control
- **I/O optimization** - `--no-order` flag for maximum speed on I/O-constrained systems
- **Debug capabilities** - `--debug` and `--verbose` flags for troubleshooting
- **Threshold-based processing** - Files >1000 lines automatically trigger parallel mode
- **Multi-file support** - Process multiple JSONL files in sequence
- **Stdin/pipe support** - Works seamlessly with shell pipelines

### Performance
- **6x faster** than regular jq on large datasets (tested with 800k+ records)
- **Automatic CPU scaling** - Utilizes all available cores (`nproc`)
- **Memory efficient** - Chunk-based processing using GNU parallel's `--pipepart`
- **Optimized block size** - 2MB blocks for optimal throughput
- **Order preservation** - Only ~7% performance overhead for deterministic output

### Supported Query Types
- ✅ **Simple filters** - `select(.field > value)` patterns
- ✅ **Null handling** - `select(.field != null)` with proper validation
- ✅ **Numeric comparisons** - All standard comparison operators
- ✅ **Boolean logic** - Complex `and`/`or` conditions in select statements
- ✅ **Count aggregations** - `[select(...)] | length` patterns
- ✅ **Sum aggregations** - `[select(...) | .field] | add` patterns  
- ✅ **Average calculations** - `[select(...) | .field] | add/length` patterns
- ⚠️ **Complex operations** - `group_by`, `sort_by`, `unique` stay sequential for correctness

### Testing & Validation
- **Real-world tested** - Validated on datasets up to 1M+ records
- **Comprehensive test suite** - Covers performance, correctness, and edge cases
- **Content integrity** - 100% identical results to jq with deterministic output ordering
- **Cross-platform** - Works on Linux and macOS with standard dependencies

### Dependencies
- **jq** - Required for JSON processing
- **GNU parallel** - Required for parallel execution
- **bash** - Shell environment (v4.0+)
- **Standard utilities** - `wc`, `awk`, `sed` for data processing

### Known Limitations
- **Complex jq features** - Not extensively tested on exotic jq functionality
- **Order sensitivity** - `--no-order` may change output sequence (by design)
- **File handle usage** - Internal ordering mechanism uses additional file descriptors
- **Disk I/O** - Deterministic output requires temporary disk buffering (GNU parallel's --keep-order mechanism)

---

## Development Notes

This project was developed to solve real-world JSON processing performance bottlenecks. The implementation prioritizes:

1. **Correctness** - Identical results to jq
2. **Performance** - Significant speedup on large datasets  
3. **Usability** - Drop-in replacement with minimal learning curve
4. **Reliability** - Automatic fallback to sequential processing when needed

**Built to solve real-world JSON processing performance bottlenecks.**